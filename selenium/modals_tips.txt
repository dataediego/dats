Yes, handling front-end modals in Selenium with Python is a common requirement in automation testing. Front-end modals, such as pop-ups, overlays, or dialogs, can indeed interrupt the automation flow. Selenium provides various methods to deal with these interruptions.

Here are some approaches to handle front-end modals:

1. **Implicit Wait:**
   - Use implicit waits to wait for a certain period for an element to be present before interacting with it. This can be useful when a modal takes some time to load after a user action.

   ```python
   from selenium import webdriver

   driver = webdriver.Chrome()

   # Set implicit wait
   driver.implicitly_wait(10)  # 10 seconds, adjust as needed

   # Your automation steps
   ```

2. **Explicit Wait:**
   - Use explicit waits to wait for a specific condition before proceeding. This is especially useful when waiting for a modal to appear or disappear.

   ```python
   from selenium import webdriver
   from selenium.webdriver.common.by import By
   from selenium.webdriver.support.ui import WebDriverWait
   from selenium.webdriver.support import expected_conditions as EC

   driver = webdriver.Chrome()

   # Use explicit wait for an element to be present
   element = WebDriverWait(driver, 10).until(
       EC.presence_of_element_located((By.ID, "modalId"))
   )

   # Your automation steps
   ```

3. **Alert Handling:**
   - For JavaScript alerts, you can use `try` and `except` blocks to handle them without causing interruptions.

   ```python
   from selenium import webdriver
   from selenium.common.exceptions import NoAlertPresentException

   driver = webdriver.Chrome()

   try:
       # Try to switch to an alert
       alert = driver.switch_to.alert
       alert.accept()
   except NoAlertPresentException:
       # No alert present, continue with your automation
       pass
   ```

4. **Headless Mode:**
   - If modal pop-ups are not critical for your testing, consider running your Selenium script in headless mode, which means running the browser without a graphical user interface.

   ```python
   from selenium import webdriver

   options = webdriver.ChromeOptions()
   options.add_argument('--headless')

   driver = webdriver.Chrome(options=options)
   ```

Remember that the effectiveness of these approaches depends on the specific behavior of the modals in the application you are testing. Choose the method that best fits your scenario and adapt as needed.